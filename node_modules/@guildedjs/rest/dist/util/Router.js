"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = void 0;
const routes_1 = require("./routes");
class Router {
    constructor(rest) {
        this.rest = rest;
    }
    /** Create a channel */
    createChannel(data) {
        return this.rest.post(routes_1.ROUTES.channels(), data);
    }
    /** Fetch a channel */
    getChannel(channelId) {
        return this.rest.get(routes_1.ROUTES.channel(channelId));
    }
    /** Update a channel */
    updateChannel(channelId, data) {
        return this.rest.patch(routes_1.ROUTES.channel(channelId), data);
    }
    /** Delete a channel */
    deleteChannel(channelId) {
        return this.rest.delete(routes_1.ROUTES.channel(channelId));
    }
    /** Send a message to a channel */
    createChannelMessage(channelId, content) {
        return this.rest.post(routes_1.ROUTES.channelMessages(channelId), content);
    }
    /** Get a list of the latest 50 messages from a channel. */
    getChannelMessages(channelId, options) {
        return this.rest.get(routes_1.ROUTES.channelMessages(channelId), options);
    }
    /** Get details for a specific chat message from a chat channel. */
    getChannelMessage(channelId, messageId) {
        return this.rest.get(routes_1.ROUTES.channelMessage(channelId, messageId));
    }
    /** Update a channel message. */
    updateChannelMessage(channelId, messageId, options) {
        return this.rest.put(routes_1.ROUTES.channelMessage(channelId, messageId), options);
    }
    /** Delete a channel message. */
    deleteChannelMessage(channelId, messageId) {
        return this.rest.delete(routes_1.ROUTES.channelMessage(channelId, messageId));
    }
    /** Get a list of the roles assigned to a member using the id of the member. */
    getMemberRoles(serverId, userId) {
        return this.rest.get(routes_1.ROUTES.memberRoles(serverId, userId));
    }
    /** Update a member's nickname. */
    updateMemberNickname(serverId, userId, nickname) {
        return this.rest.put(routes_1.ROUTES.memberNickname(serverId, userId), { nickname });
    }
    /** Delete a member's nickname */
    deleteMemberNickname(serverId, userId) {
        return this.rest.delete(routes_1.ROUTES.memberNickname(serverId, userId));
    }
    /** Create a thread in a forum */
    createForumThread(channelId, options) {
        return this.rest.post(routes_1.ROUTES.forumThread(channelId), options);
    }
    /** Create a list item. */
    createListItem(channelId, options) {
        return this.rest.post(routes_1.ROUTES.listItems(channelId), options);
    }
    /** Get list items */
    getListItems(channelId) {
        return this.rest.get(routes_1.ROUTES.listItems(channelId));
    }
    /** Get list item */
    getListItem(channelId, itemId) {
        return this.rest.get(routes_1.ROUTES.listItem(channelId, itemId));
    }
    /** Update list item */
    updateListItem(channelId, itemId, options) {
        return this.rest.put(routes_1.ROUTES.listItem(channelId, itemId), options);
    }
    /** Delete list item */
    deleteListItem(channelId, itemId) {
        return this.rest.delete(routes_1.ROUTES.listItem(channelId, itemId));
    }
    completeListItem(channelId, itemId) {
        return this.rest.post(routes_1.ROUTES.listItemComplete(channelId, itemId));
    }
    uncompleteListItem(channelId, itemId) {
        return this.rest.delete(routes_1.ROUTES.listItemComplete(channelId, itemId));
    }
    /** Create a doc. */
    createDoc(channelId, options) {
        return this.rest.post(routes_1.ROUTES.channelDocs(channelId), options);
    }
    /** Get the docs from a channel. */
    getDocs(channelId) {
        return this.rest.get(routes_1.ROUTES.channelDocs(channelId));
    }
    /** Get a doc from a channel. */
    getDoc(channelId, docId) {
        return this.rest.get(routes_1.ROUTES.channelDoc(channelId, docId));
    }
    /** Update a doc */
    updateDoc(channelId, docId, options) {
        return this.rest.put(routes_1.ROUTES.channelDoc(channelId, docId), options);
    }
    /** Delete a doc from a channel. */
    deleteDoc(channelId, docId) {
        return this.rest.delete(routes_1.ROUTES.channelDoc(channelId, docId));
    }
    /** Add a reaction emote */
    addReactionEmote(channelId, contentId, emoteId) {
        return this.rest.put(routes_1.ROUTES.channelReaction(channelId, contentId, emoteId));
    }
    /** Award XP to a member */
    awardMemberXP(serverId, userId, amount) {
        return this.rest.post(routes_1.ROUTES.memberXP(serverId, userId), { amount });
    }
    /** Award XP to a role */
    awardRoleXP(serverId, roleId, amount) {
        return this.rest.post(routes_1.ROUTES.roleXP(serverId, roleId), { amount });
    }
    /** Retrieves a member's public social links */
    getMemberSocialLinks(serverId, userId, type) {
        return this.rest.get(routes_1.ROUTES.memberSocialLinks(serverId, userId, type));
    }
    getMember(serverId, userId) {
        return this.rest.get(routes_1.ROUTES.member(serverId, userId));
    }
    getMembers(serverId) {
        return this.rest.get(routes_1.ROUTES.members(serverId));
    }
    kickMember(serverId, userId) {
        return this.rest.delete(routes_1.ROUTES.member(serverId, userId));
    }
    /** Ban a member from a server */
    banMember(serverId, userId) {
        return this.rest.post(routes_1.ROUTES.memberBan(serverId, userId));
    }
    /** Retrieve a ban from a server */
    getMemberBan(serverId, userId) {
        return this.rest.get(routes_1.ROUTES.memberBan(serverId, userId));
    }
    /** Unban a member from a server */
    unbanMember(serverId, userId) {
        return this.rest.delete(routes_1.ROUTES.memberBan(serverId, userId));
    }
    /** Get all bans in a server */
    getMemberBans(serverId) {
        return this.rest.get(routes_1.ROUTES.memberBans(serverId));
    }
    /** Add member to group */
    addMemberToGroup(groupId, userId) {
        return this.rest.put(routes_1.ROUTES.groupMember(groupId, userId));
    }
    /** Remove member from group */
    removeMemberFromGroup(groupId, userId) {
        return this.rest.delete(routes_1.ROUTES.groupMember(groupId, userId));
    }
    /** Assign role to member */
    assignRoleToMember(serverId, userId, roleId) {
        return this.rest.put(routes_1.ROUTES.memberRole(serverId, userId, roleId));
    }
    /** Remove role to member */
    removeRoleFromMember(serverId, userId, roleId) {
        return this.rest.delete(routes_1.ROUTES.memberRole(serverId, userId, roleId));
    }
    /** Create a webhook */
    createWebhook(serverId, options) {
        return this.rest.post(routes_1.ROUTES.serverWebhooks(serverId), options);
    }
    /** Get a server's webhooks */
    getWebhooks(serverId, channelId) {
        return this.rest.get(routes_1.ROUTES.serverWebhooks(serverId), channelId ? { channelId } : undefined);
    }
    /** Get a webhook */
    getWebhook(serverId, webhookId) {
        return this.rest.get(routes_1.ROUTES.serverWebhook(serverId, webhookId));
    }
    /** Update a webhook */
    updateWebhook(serverId, webhookId, options) {
        return this.rest.put(routes_1.ROUTES.serverWebhook(serverId, webhookId), options);
    }
    /** Delete a webhook */
    deleteWebhook(serverId, webhookId) {
        return this.rest.delete(routes_1.ROUTES.serverWebhook(serverId, webhookId));
    }
}
exports.Router = Router;
//# sourceMappingURL=Router.js.map