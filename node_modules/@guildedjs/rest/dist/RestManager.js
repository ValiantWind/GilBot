"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestManager = void 0;
let HTTPFetch = globalThis.fetch;
if (!HTTPFetch) {
    HTTPFetch = require("node-fetch");
}
const qs_1 = require("qs");
const GuildedAPIError_1 = require("./errors/GuildedAPIError");
const PermissionsError_1 = require("./errors/PermissionsError");
const Router_1 = require("./util/Router");
class RestManager {
    constructor(options) {
        var _a;
        this.options = options;
        /** The bot token to be used for making requests. */
        this.token = this.options.token;
        /** The version of the API to be used for making requests. By default, this will use the latest version that the library supports. */
        this.version = (_a = this.options.version) !== null && _a !== void 0 ? _a : 1;
        /** The proxy url if it was set. */
        this.proxyURL = this.options.proxyURL;
        /** The router with all the helper methods. */
        this.router = new Router_1.Router(this);
    }
    /** The base url to send the request to. */
    get baseURL() {
        var _a;
        return (_a = this.proxyURL) !== null && _a !== void 0 ? _a : `https://www.guilded.gg/api/v${this.version}`;
    }
    make(data, authenticated = true, retryCount = 0) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {};
            if (authenticated)
                headers.Authorization = `Bearer ${this.token}`;
            const requestOptions = {
                body: data.body ? JSON.stringify(data.body) : undefined,
                headers: Object.assign({ "content-type": "application/json" }, headers),
                method: data.method,
            };
            const queryAppendedURL = data.query ? `${data.path}?${(0, qs_1.stringify)(data.query)}` : data.path;
            let request;
            try {
                request = yield HTTPFetch(this.baseURL + queryAppendedURL, requestOptions);
            }
            catch (e) {
                throw new Error(`Error while making API call, ${e.message.toString()}`);
            }
            if (!request.ok) {
                if (request.status === 429) {
                    if (retryCount >= ((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.maxRatelimitRetryLimit) !== null && _b !== void 0 ? _b : 3)) {
                        throw new Error("MAX REQUEST RATELIMIT RETRY LIMIT REACHED.");
                    }
                    yield sleep((_d = (_c = this.options) === null || _c === void 0 ? void 0 : _c.restOffset) !== null && _d !== void 0 ? _d : 3500);
                    return this.make(data, authenticated, retryCount++);
                }
                const parsedRequest = yield request.json().catch(() => ({ message: "Cannot parse JSON Error Response." }));
                if (request.status === 403 && parsedRequest.code === "ForbiddenError") {
                    throw new PermissionsError_1.PermissionsError(parsedRequest.message, data.method, data.path, (_e = parsedRequest.meta) === null || _e === void 0 ? void 0 : _e.missingPermissions);
                }
                throw new GuildedAPIError_1.GuildedAPIError(parsedRequest.message, data.method, data.path, request.status);
            }
            return [request, request.json().catch(() => ({}))];
        });
    }
    get(path, query, authenticated = true) {
        return this.make({
            method: "GET",
            path,
            query,
        }, authenticated).then((x) => x[1]);
    }
    post(path, body, authenticated = true) {
        return this.make({
            body,
            method: "POST",
            path,
        }, authenticated).then((x) => x[1]);
    }
    delete(path, body, authenticated = true) {
        return this.make({
            body,
            method: "DELETE",
            path,
        }, authenticated).then((x) => x[1]);
    }
    patch(path, body, authenticated = true) {
        return this.make({
            body,
            method: "PATCH",
            path,
        }, authenticated).then((x) => x[1]);
    }
    put(path, body, authenticated = true) {
        return this.make({
            body,
            method: "PUT",
            path,
        }, authenticated).then((x) => x[1]);
    }
}
exports.RestManager = RestManager;
const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
//# sourceMappingURL=RestManager.js.map