import type { RESTDeleteChannelMessageResult, RESTDeleteChannelResult, RESTDeleteDocResult, RESTDeleteGroupMemberResult, RESTDeleteListItemCompleteResult, RESTDeleteListItemResult, RESTDeleteMemberBanResult, RESTDeleteMemberNicknameResult, RESTDeleteMemberResult, RESTDeleteMemberRoleResult, RESTDeleteServerWebhookResult, RESTGetChannelMessageResult, RESTGetChannelMessagesQuery, RESTGetChannelMessagesResult, RESTGetChannelResult, RESTGetDocResult, RESTGetDocsResult, RESTGetListItemResult, RESTGetListItemsResult, RESTGetMemberBanResult, RESTGetMemberBansResult, RESTGetMemberResult, RESTGetMemberRolesResult, RESTGetMemberSocialLinkResult, RESTGetMembersResult, RESTGetServerWebhookResult, RESTGetServerWebhooksResult, RESTPatchChannelBody, RESTPatchChannelResult, RESTPostChannelMessagesBody, RESTPostChannelMessagesResult, RESTPostChannelsBody, RESTPostChannelsResult, RESTPostDocsBody, RESTPostDocsResult, RESTPostForumThreadBody, RESTPostForumThreadResult, RESTPostListItemBody, RESTPostListItemCompleteResult, RESTPostListItemResult, RESTPostMemberBanResult, RESTPostRoleXpResult, RESTPostServerWebhooksBody, RESTPostServerWebhooksResult, RESTPostUserXpResult, RESTPutChannelMessageBody, RESTPutChannelMessageResult, RESTPutDocBody, RESTPutDocResult, RESTPutGroupMemberResult, RESTPutListItemBody, RESTPutListItemResult, RESTPutMemberNicknameResult, RESTPutMemberRoleResult, RESTPutReactionResult, RESTPutServerWebhookBody, RESTPutServerWebhookResult, UserSocialLink } from "@guildedjs/guilded-api-typings";
import type { RestManager } from "../RestManager";
export declare class Router {
    readonly rest: RestManager;
    constructor(rest: RestManager);
    /** Create a channel */
    createChannel(data: RESTPostChannelsBody): Promise<RESTPostChannelsResult>;
    /** Fetch a channel */
    getChannel(channelId: string): Promise<RESTGetChannelResult>;
    /** Update a channel */
    updateChannel(channelId: string, data: RESTPatchChannelBody): Promise<RESTPatchChannelResult>;
    /** Delete a channel */
    deleteChannel(channelId: string): Promise<RESTDeleteChannelResult>;
    /** Send a message to a channel */
    createChannelMessage(channelId: string, content: RESTPostChannelMessagesBody): Promise<RESTPostChannelMessagesResult>;
    /** Get a list of the latest 50 messages from a channel. */
    getChannelMessages(channelId: string, options: RESTGetChannelMessagesQuery): Promise<RESTGetChannelMessagesResult>;
    /** Get details for a specific chat message from a chat channel. */
    getChannelMessage(channelId: string, messageId: string): Promise<RESTGetChannelMessageResult>;
    /** Update a channel message. */
    updateChannelMessage(channelId: string, messageId: string, options: RESTPutChannelMessageBody): Promise<RESTPutChannelMessageResult>;
    /** Delete a channel message. */
    deleteChannelMessage(channelId: string, messageId: string): Promise<RESTDeleteChannelMessageResult>;
    /** Get a list of the roles assigned to a member using the id of the member. */
    getMemberRoles(serverId: string, userId: string): Promise<RESTGetMemberRolesResult>;
    /** Update a member's nickname. */
    updateMemberNickname(serverId: string, userId: string, nickname: string): Promise<RESTPutMemberNicknameResult>;
    /** Delete a member's nickname */
    deleteMemberNickname(serverId: string, userId: string): Promise<RESTDeleteMemberNicknameResult>;
    /** Create a thread in a forum */
    createForumThread(channelId: string, options: RESTPostForumThreadBody): Promise<RESTPostForumThreadResult>;
    /** Create a list item. */
    createListItem(channelId: string, options: RESTPostListItemBody): Promise<RESTPostListItemResult>;
    /** Get list items */
    getListItems(channelId: string): Promise<RESTGetListItemsResult>;
    /** Get list item */
    getListItem(channelId: string, itemId: string): Promise<RESTGetListItemResult>;
    /** Update list item */
    updateListItem(channelId: string, itemId: string, options: RESTPutListItemBody): Promise<RESTPutListItemResult>;
    /** Delete list item */
    deleteListItem(channelId: string, itemId: string): Promise<RESTDeleteListItemResult>;
    completeListItem(channelId: string, itemId: string): Promise<RESTPostListItemCompleteResult>;
    uncompleteListItem(channelId: string, itemId: string): Promise<RESTDeleteListItemCompleteResult>;
    /** Create a doc. */
    createDoc(channelId: string, options: RESTPostDocsBody): Promise<RESTPostDocsResult>;
    /** Get the docs from a channel. */
    getDocs(channelId: string): Promise<RESTGetDocsResult>;
    /** Get a doc from a channel. */
    getDoc(channelId: string, docId: number): Promise<RESTGetDocResult>;
    /** Update a doc */
    updateDoc(channelId: string, docId: number, options: RESTPutDocBody): Promise<RESTPutDocResult>;
    /** Delete a doc from a channel. */
    deleteDoc(channelId: string, docId: number): Promise<RESTDeleteDocResult>;
    /** Add a reaction emote */
    addReactionEmote(channelId: string, contentId: string, emoteId: number): Promise<RESTPutReactionResult>;
    /** Award XP to a member */
    awardMemberXP(serverId: string, userId: string, amount: number): Promise<RESTPostUserXpResult>;
    /** Award XP to a role */
    awardRoleXP(serverId: string, roleId: string, amount: number): Promise<RESTPostRoleXpResult>;
    /** Retrieves a member's public social links */
    getMemberSocialLinks(serverId: string, userId: string, type: UserSocialLink): Promise<RESTGetMemberSocialLinkResult>;
    getMember(serverId: string, userId: string): Promise<RESTGetMemberResult>;
    getMembers(serverId: string): Promise<RESTGetMembersResult>;
    kickMember(serverId: string, userId: string): Promise<RESTDeleteMemberResult>;
    /** Ban a member from a server */
    banMember(serverId: string, userId: string): Promise<RESTPostMemberBanResult>;
    /** Retrieve a ban from a server */
    getMemberBan(serverId: string, userId: string): Promise<RESTGetMemberBanResult>;
    /** Unban a member from a server */
    unbanMember(serverId: string, userId: string): Promise<RESTDeleteMemberBanResult>;
    /** Get all bans in a server */
    getMemberBans(serverId: string): Promise<RESTGetMemberBansResult>;
    /** Add member to group */
    addMemberToGroup(groupId: string, userId: string): Promise<RESTPutGroupMemberResult>;
    /** Remove member from group */
    removeMemberFromGroup(groupId: string, userId: string): Promise<RESTDeleteGroupMemberResult>;
    /** Assign role to member */
    assignRoleToMember(serverId: string, userId: string, roleId: number): Promise<RESTPutMemberRoleResult>;
    /** Remove role to member */
    removeRoleFromMember(serverId: string, userId: string, roleId: number): Promise<RESTDeleteMemberRoleResult>;
    /** Create a webhook */
    createWebhook(serverId: string, options: RESTPostServerWebhooksBody): Promise<RESTPostServerWebhooksResult>;
    /** Get a server's webhooks */
    getWebhooks(serverId: string, channelId?: string): Promise<RESTGetServerWebhooksResult>;
    /** Get a webhook */
    getWebhook(serverId: string, webhookId: string): Promise<RESTGetServerWebhookResult>;
    /** Update a webhook */
    updateWebhook(serverId: string, webhookId: string, options: RESTPutServerWebhookBody): Promise<RESTPutServerWebhookResult>;
    /** Delete a webhook */
    deleteWebhook(serverId: string, webhookId: string): Promise<RESTDeleteServerWebhookResult>;
}
//# sourceMappingURL=Router.d.ts.map