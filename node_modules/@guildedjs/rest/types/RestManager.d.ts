import type { RestOptions } from "./typings";
import { Router } from "./util/Router";
export declare class RestManager {
    readonly options: RestOptions;
    /** The bot token to be used for making requests. */
    token: string;
    /** The version of the API to be used for making requests. By default, this will use the latest version that the library supports. */
    version: 1;
    /** The proxy url if it was set. */
    proxyURL: string | undefined;
    /** The router with all the helper methods. */
    readonly router: Router;
    constructor(options: RestOptions);
    /** The base url to send the request to. */
    get baseURL(): string;
    make<T extends JSONB, B = RequestBodyObject, Q = never>(data: MakeOptions<B, Q>, authenticated?: boolean, retryCount?: number): Promise<[Response, Promise<T>]>;
    get<T extends JSONB, Q = RequestBodyObject>(path: string, query?: Q, authenticated?: boolean): Promise<T>;
    post<T extends JSONB, B = RequestBodyObject>(path: string, body?: B, authenticated?: boolean): Promise<T>;
    delete<T extends JSONB, B = RequestBodyObject>(path: string, body?: B, authenticated?: boolean): Promise<T>;
    patch<T extends JSONB, B = RequestBodyObject>(path: string, body: B, authenticated?: boolean): Promise<T>;
    put<T extends JSONB, B = RequestBodyObject>(path: string, body?: B, authenticated?: boolean): Promise<T>;
}
export interface MakeOptions<B = Record<string, any>, Q = RequestBodyObject> {
    method: string;
    query?: Q;
    path: string;
    body?: B;
}
export declare type JSONB = Record<string, any>;
export declare type RequestBodyObject = JSONB | undefined;
//# sourceMappingURL=RestManager.d.ts.map