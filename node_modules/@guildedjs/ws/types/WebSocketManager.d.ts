import { SkeletonWSPayload, WSEvent, WSWelcomePayload } from "@guildedjs/guilded-api-typings";
import type TypedEmitter from "typed-emitter";
import WebSocket from "ws";
export declare class WebSocketManager {
    readonly options: WebSocketOptions;
    /** The version of the websocket to connect to. */
    version: 1;
    /** Token used to authenticate requests. */
    token: string;
    /** The websocket connected to guilded. */
    socket: WebSocket | null;
    /** Whether or not this connection is connected and heartbeating. */
    isAlive: boolean;
    /** The amount of milliseconds the websocket took to respond to the last ping request. */
    ping: number | null;
    /** The timestamp in milliseconds of the last ping request. */
    lastPingedAt: number;
    /** The last message id received. Used in the event of resuming connections. */
    messageId: string | null;
    /** The date since the last initial connection was established. */
    connectedAt: Date | null;
    /** Emitter in charge of emitting ws gateway related events */
    emitter: TypedEmitter<WebsocketManagerEvents>;
    /** Count of how many times a reconnect has been attempted */
    reconnectAttemptAmount: number;
    constructor(options: WebSocketOptions);
    /** The url that will be used to connect. Prioritizes proxy url and if not available uses the default base url for guidled. */
    get wsURL(): string;
    get reconnectAttemptExceeded(): boolean;
    connect(): void;
    destroy(): void;
    _debug(str: any): boolean;
    private onSocketMessage;
    private onSocketOpen;
    private onSocketPing;
    private onSocketPong;
}
export interface WebSocketOptions {
    /** The bot's token. */
    token: string;
    /** The base url that the websocket will connect to. */
    proxyURL?: string;
    /** The version of the websocket to connect to. */
    version?: 1;
    /** Whether to try to re-establish connection on error */
    autoConnectOnErr?: boolean;
    /** Limit of how many times a reconnection should be attempted */
    reconnectAttemptLimit?: number;
}
declare type WebsocketManagerEvents = {
    debug: (data: any) => unknown;
    raw: (data: any) => unknown;
    error: (reason: string, err: Error | null, data?: any) => unknown;
    exit: (info: string) => unknown;
    unknown: (reason: string, data: any) => unknown;
    reconnect: () => unknown;
    gatewayEvent: (event: keyof WSEvent, data: SkeletonWSPayload) => unknown;
    ready: (user: WSWelcomePayload["d"]["user"]) => unknown;
};
export {};
//# sourceMappingURL=WebSocketManager.d.ts.map