"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketManager = void 0;
/* eslint-disable @typescript-eslint/no-base-to-string */
const guilded_api_typings_1 = require("@guildedjs/guilded-api-typings");
const events_1 = require("events");
const ws_1 = __importDefault(require("ws"));
class WebSocketManager {
    constructor(options) {
        var _a;
        this.options = options;
        /** The version of the websocket to connect to. */
        this.version = (_a = this.options.version) !== null && _a !== void 0 ? _a : 1;
        /** Token used to authenticate requests. */
        this.token = this.options.token;
        /** The websocket connected to guilded. */
        this.socket = null;
        /** Whether or not this connection is connected and heartbeating. */
        this.isAlive = false;
        /** The amount of milliseconds the websocket took to respond to the last ping request. */
        this.ping = null;
        /** The timestamp in milliseconds of the last ping request. */
        this.lastPingedAt = 0;
        /** The last message id received. Used in the event of resuming connections. */
        this.messageId = null;
        /** The date since the last initial connection was established. */
        this.connectedAt = null;
        /** Emitter in charge of emitting ws gateway related events */
        this.emitter = new events_1.EventEmitter();
        /** Count of how many times a reconnect has been attempted */
        this.reconnectAttemptAmount = 0;
    }
    /** The url that will be used to connect. Prioritizes proxy url and if not available uses the default base url for guidled. */
    get wsURL() {
        var _a;
        return (_a = this.options.proxyURL) !== null && _a !== void 0 ? _a : `wss://api.guilded.gg/v${this.version}/websocket`;
    }
    get reconnectAttemptExceeded() {
        var _a;
        return this.reconnectAttemptAmount >= ((_a = this.options.reconnectAttemptLimit) !== null && _a !== void 0 ? _a : Infinity);
    }
    connect() {
        this.socket = new ws_1.default(this.wsURL, {
            headers: {
                Authorization: `Bearer ${this.token}`,
            },
        });
        this.socket.on("open", this.onSocketOpen.bind(this));
        this.socket.on("ping", this.onSocketPing.bind(this));
        this.socket.on("pong", this.onSocketPong.bind(this));
        this.socket.on("message", (data) => {
            this.emitter.emit("raw", data);
            this._debug(data.toString());
            this.onSocketMessage(data.toString());
        });
        this.socket.on("error", (err) => {
            var _a;
            this._debug("Gateway connection errored.");
            this.emitter.emit("error", "Gateway Error", err);
            if (!((_a = this.options.autoConnectOnErr) !== null && _a !== void 0 ? _a : true) || this.reconnectAttemptExceeded) {
                this.reconnectAttemptAmount++;
                return this.connect();
            }
            this.destroy();
            this.emitter.emit("exit", "Gateway connection permanently closed due to error.");
        });
        this.socket.on("close", (code, reason) => {
            var _a;
            this._debug(`Gateway connection terminated with code ${code} for reason: ${reason.toString()}`);
            if (((_a = this.options.autoConnectOnErr) !== null && _a !== void 0 ? _a : true) && !this.reconnectAttemptExceeded) {
                this.reconnectAttemptAmount++;
                return this.connect();
            }
            this.destroy();
            this.emitter.emit("exit", "Gateway connection permanently closed.");
        });
    }
    destroy() {
        if (!this.socket)
            throw new Error("There is no active connection to destroy.");
        this.socket.removeAllListeners();
        if (this.socket.OPEN)
            this.socket.close();
        this.isAlive = false;
    }
    _debug(str) {
        return this.emitter.emit("debug", `[DEBUG] ${str}`);
    }
    onSocketMessage(packet) {
        let EVENT_NAME;
        let EVENT_DATA;
        try {
            const data = JSON.parse(packet);
            EVENT_NAME = data.t;
            EVENT_DATA = data;
        }
        catch (error) {
            this.emitter.emit("error", "ERROR PARSING WS EVENT", error, packet);
            return void 0;
        }
        // SAVE THE ID IF AVAILABLE. USED FOR RESUMING CONNECTIONS.
        if (EVENT_DATA.s)
            this.messageId = EVENT_DATA.s;
        switch (EVENT_DATA.op) {
            // Normal event based packets
            case guilded_api_typings_1.WSOpCodes.SUCCESS:
                this.emitter.emit("gatewayEvent", EVENT_NAME, EVENT_DATA);
                break;
            // Auto handled by ws lib
            case guilded_api_typings_1.WSOpCodes.WELCOME:
                this.emitter.emit("ready", EVENT_DATA.d.user);
                break;
            default:
                this.emitter.emit("unknown", "unknown opcode", packet);
                break;
        }
    }
    onSocketOpen() {
        this._debug("Socket connection opened.");
        this.isAlive = true;
        this.connectedAt = new Date();
    }
    onSocketPing() {
        this._debug("Ping received.");
        this.lastPingedAt = Date.now();
        this.socket.ping();
    }
    onSocketPong() {
        this._debug("Pong received.");
        this.ping = Date.now() - this.lastPingedAt;
    }
}
exports.WebSocketManager = WebSocketManager;
//# sourceMappingURL=WebSocketManager.js.map