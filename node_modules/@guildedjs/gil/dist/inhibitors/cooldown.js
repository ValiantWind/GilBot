"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CooldownInhibitor = void 0;
const collection_1 = __importDefault(require("@discordjs/collection"));
const Inhibitor_1 = require("../structures/Inhibitor");
class CooldownInhibitor extends Inhibitor_1.Inhibitor {
    constructor() {
        super(...arguments);
        this.name = "cooldown";
        /** The collection of users that are in cooldown */
        this.membersInCooldown = new collection_1.default();
    }
    execute(message, command) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!command.cooldown)
                return false;
            const key = `${message.createdById}-${command.name}`;
            const cooldown = this.membersInCooldown.get(key);
            if (cooldown) {
                if (cooldown.used >= (command.cooldown.allowedUses || 1)) {
                    const now = Date.now();
                    if (cooldown.timestamp > now) {
                        yield this.client.messages.send(message.channelId, {
                            content: `You must wait **${this.client.humanizeMilliseconds(cooldown.timestamp - now)}** before using this command again.`,
                            replyMessageIds: [message.id],
                        });
                        return true;
                    }
                    cooldown.used = 0;
                }
                this.membersInCooldown.set(key, {
                    used: cooldown.used + 1,
                    timestamp: Date.now() + command.cooldown.seconds * 1000,
                });
                return false;
            }
            this.membersInCooldown.set(key, {
                used: 1,
                timestamp: Date.now() + command.cooldown.seconds * 1000,
            });
            return false;
        });
    }
    init() {
        // shut up eslint
    }
}
exports.CooldownInhibitor = CooldownInhibitor;
exports.default = CooldownInhibitor;
//# sourceMappingURL=cooldown.js.map