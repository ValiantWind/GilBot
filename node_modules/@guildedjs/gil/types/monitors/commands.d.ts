import type { Message } from "guilded.js";
import type { Command } from "../structures/Command";
import { Monitor } from "../structures/Monitor";
export declare class CommandsMonitor extends Monitor {
    ignoreDM: boolean;
    execute(message: Message): unknown;
    parsePrefix(serverId?: string | null): string;
    parseCommand(commandName: string): Command | undefined;
    logCommand(message: Message, type: "Failure" | "Success" | "Trigger" | "Slowmode" | "Missing" | "Inhibit", commandName: string): void;
    executeCommand(message: Message, command: Command, parameters: string[]): Promise<void>;
    parseArguments(message: Message, command: Command, parameters: string[]): Promise<false | Record<string, unknown>>;
    commandAllowed(message: Message, command: Command): Promise<boolean>;
    init(): unknown;
}
export default CommandsMonitor;
//# sourceMappingURL=commands.d.ts.map