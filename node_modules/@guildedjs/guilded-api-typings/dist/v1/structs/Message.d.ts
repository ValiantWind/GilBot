export interface ChatMessagePayload {
    /** The id of the message */
    id: string;
    /** The id of the server this message belongs to */
    serverId?: string;
    /** The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated. */
    type: "default" | "system";
    /** The ID of the channel */
    channelId: string;
    /** The content of the message */
    content: string;
    /** The ID of the messages that this is replying to. */
    replyMessageIds?: string[];
    /** If set, this message will only be seen by those mentioned or replied to. */
    isPrivate?: boolean;
    /** If set, this message did not notify, mention or reply recipients. */
    isSilent?: boolean;
    /** The ISO 8601 timestamp that the message was created at. */
    createdAt: string;
    /** The ID of the user who created this message (Note: If this event has createdByBotId or createdByWebhookId present, this field will still be populated, but can be ignored. In these cases, the value of this field will always be Ann6LewA) */
    createdBy: string;
    /** The ID of the bot who created this message, if it was created by a bot */
    createdByBotId?: string;
    /** The ID of the webhook who created this message, if it was created by a webhook */
    createdByWebhookId?: string;
    /** The ISO 8601 timestamp that the message was updated at, if relevant */
    updatedAt?: string;
    /** The embeds within this message */
    embeds?: EmbedPayload[];
}
export interface EmbedPayload {
    title?: string;
    description?: string;
    url?: string;
    timestamp?: string;
    color?: number;
    footer?: EmbedFooter;
    image?: EmbedImage;
    thumbnail?: EmbedImage;
    author?: EmbedAuthor;
    fields?: EmbedField[];
}
export interface EmbedFooter {
    text: string;
    icon_url?: string;
}
export interface EmbedImage {
    url: string;
}
export interface EmbedAuthor {
    name: string;
    icon_url?: string;
    url?: string;
}
export interface EmbedField {
    inline?: boolean;
    name: string;
    value: string;
}
//# sourceMappingURL=Message.d.ts.map