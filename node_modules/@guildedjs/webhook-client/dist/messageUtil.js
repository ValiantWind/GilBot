"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseMessage = exports.parseToMessage = void 0;
const Embed_1 = require("./Embed");
function parseToMessage(input = "", embed) {
    return {
        document: {
            data: {},
            nodes: [
                {
                    data: {},
                    nodes: [
                        {
                            leaves: [
                                {
                                    marks: [],
                                    object: "leaf",
                                    text: typeof input === "string" ? input : "",
                                },
                            ],
                            object: "text",
                        },
                    ],
                    object: "block",
                    type: "markdown-plain-text",
                },
                {
                    data: {
                        embeds: embed
                            ? embed instanceof Embed_1.Embed
                                ? [embed === null || embed === void 0 ? void 0 : embed.toJSON()]
                                : [embed]
                            : typeof input === "string"
                                ? []
                                : input instanceof Embed_1.Embed
                                    ? [input === null || input === void 0 ? void 0 : input.toJSON()]
                                    : [input],
                    },
                    nodes: [],
                    object: "block",
                    type: "webhookMessage",
                },
            ],
            object: "document",
        },
        object: "value",
    };
}
exports.parseToMessage = parseToMessage;
/**
 * Parse a message recieved from Guilded into a more digestable structure
 * @internal
 */
function parseMessage(data) {
    const parsedMessageArray = [];
    let parsedMessageTextContent = "";
    const mentions = {
        channels: [],
        reactions: [],
        roles: [],
        users: [],
    };
    const embeds = [];
    const messageLinesWithoutEmpty = data.document.nodes.filter((x) => x.type === "webhookMessage" ? x.data.embeds.length > 0 : true);
    for (let i = 0; i < messageLinesWithoutEmpty.length; i++) {
        const messageLine = data.document.nodes[i];
        if (i)
            parsedMessageTextContent += "\n";
        switch (messageLine.type) {
            case "paragraph": {
                for (const node of messageLine.nodes) {
                    switch (node.object) {
                        case "text": {
                            for (const leaf of node.leaves) {
                                if (leaf.text) {
                                    parsedMessageArray.push({
                                        content: leaf.text,
                                        type: "text",
                                    });
                                }
                                parsedMessageTextContent += leaf.text;
                            }
                            break;
                        }
                        case "inline": {
                            const castedDataNode = node.data;
                            for (const leaf of node.nodes[0].leaves) {
                                switch (node.type) {
                                    case "mention": {
                                        switch (castedDataNode.mention.type) {
                                            case "person": {
                                                mentions.users.push(castedDataNode.mention.id);
                                                parsedMessageArray.push({
                                                    content: leaf.text,
                                                    mention: castedDataNode.mention,
                                                    type: "user",
                                                });
                                                break;
                                            }
                                            case "role": {
                                                parsedMessageArray.push({
                                                    content: leaf.text,
                                                    mention: castedDataNode.mention,
                                                    type: "role",
                                                });
                                                mentions.roles.push(castedDataNode.mention.id.toString());
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                    /* istanbul ignore next */
                                    case "reaction": {
                                        mentions.reactions.push(castedDataNode.reaction.id);
                                        parsedMessageArray.push({
                                            content: leaf.text,
                                            reaction: castedDataNode.reaction,
                                            type: "reaction",
                                        });
                                        break;
                                    }
                                    case "channel": {
                                        mentions.channels.push(castedDataNode.channel.id);
                                        parsedMessageArray.push({
                                            channel: castedDataNode.channel,
                                            content: leaf.text,
                                            type: "channel",
                                        });
                                        break;
                                    }
                                }
                                parsedMessageTextContent += leaf.text;
                                break;
                            }
                        }
                    }
                }
                break;
            }
            /* istanbul ignore next */
            case "block-quote-container": {
                for (const messageNodes of messageLine.nodes) {
                    for (const node of messageNodes.nodes) {
                        switch (node.object) {
                            case "text": {
                                if (node.leaves[0].text) {
                                    parsedMessageArray.push({
                                        content: node.leaves[0].text,
                                        type: "text",
                                    });
                                }
                                parsedMessageTextContent += node.leaves[0].text;
                                break;
                            }
                            case "inline": {
                                const castedDataNode = node.data;
                                switch (node.type) {
                                    case "mention": {
                                        switch (castedDataNode.mention.type) {
                                            case "person": {
                                                mentions.users.push(castedDataNode.mention.id);
                                                parsedMessageArray.push({
                                                    content: node.nodes[0].leaves[0].text,
                                                    mention: castedDataNode.mention,
                                                    type: "user",
                                                });
                                                break;
                                            }
                                            case "role": {
                                                parsedMessageArray.push({
                                                    content: node.nodes[0].leaves[0].text,
                                                    mention: castedDataNode.mention,
                                                    type: "role",
                                                });
                                                mentions.roles.push(castedDataNode.mention.id.toString());
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                    case "reaction": {
                                        mentions.reactions.push(castedDataNode.reaction.id);
                                        parsedMessageArray.push({
                                            content: node.nodes[0].leaves[0].text,
                                            reaction: castedDataNode.reaction,
                                            type: "reaction",
                                        });
                                        break;
                                    }
                                    case "channel": {
                                        mentions.channels.push(castedDataNode.channel.id);
                                        parsedMessageArray.push({
                                            channel: castedDataNode.channel,
                                            content: node.nodes[0].leaves[0].text,
                                            type: "channel",
                                        });
                                        break;
                                    }
                                }
                                parsedMessageTextContent += node.nodes[0].leaves[0].text;
                                break;
                            }
                        }
                    }
                }
                break;
            }
            case "markdown-plain-text": {
                if (messageLine.nodes[0].leaves[0].text) {
                    parsedMessageArray.push({
                        content: messageLine.nodes[0].leaves[0].text,
                        type: "text",
                    });
                }
                parsedMessageTextContent += messageLine.nodes[0].leaves[0].text;
                break;
            }
            case "webhookMessage": {
                embeds.push(...messageLine.data.embeds);
                break;
            }
        }
    }
    return {
        embeds,
        mentions,
        parsedArr: parsedMessageArray,
        parsedText: parsedMessageTextContent.trim(),
    };
}
exports.parseMessage = parseMessage;
//# sourceMappingURL=messageUtil.js.map