"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookClient = void 0;
const rest_1 = require("@guildedjs/rest");
const messageUtil_1 = require("./messageUtil");
class WebhookClient {
    constructor(webhookConnection) {
        if (!webhookConnection) {
            throw new TypeError(`Must provide Webhook connection info in either string or object. Received ${webhookConnection}.`);
        }
        if (typeof webhookConnection === "string") {
            const destructuredWebhookURL = webhookConnection.match(/guilded.gg\/webhooks\/([^/]+)\/([^/]+)/);
            if (!(destructuredWebhookURL === null || destructuredWebhookURL === void 0 ? void 0 : destructuredWebhookURL.length)) {
                throw new Error("Not a proper guilded webhook URL! Alternatively, you can provide an ID/token");
            }
            const [_, id, token] = destructuredWebhookURL;
            this.id = id;
            this.token = token;
        }
        else if (webhookConnection.id && webhookConnection.token) {
            this.id = webhookConnection.id;
            this.token = webhookConnection.token;
        }
        else {
            throw new TypeError("You must provide either a webhook URL or a webhook ID & token in an object when constructing the Webhook Client");
        }
        this.URL = `https://media.guilded.gg/webhooks/${this.id}/${this.token}`;
        this.rest = new rest_1.RestManager({ proxyURL: this.URL, token: this.token });
    }
    send(content, embeds) {
        return this.rest
            .post("", {
            content,
            embeds,
        })
            .then((data) => {
            const parsedContent = (0, messageUtil_1.parseMessage)(data.content);
            return Object.assign(Object.assign({}, data), { content: parsedContent.parsedText, parsedContent, rawContent: data.content });
        });
    }
}
exports.WebhookClient = WebhookClient;
//# sourceMappingURL=WebhookClient.js.map