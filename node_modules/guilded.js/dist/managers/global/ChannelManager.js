"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeToChannel = exports.transformTypeToChannel = exports.GlobalChannelManager = void 0;
const structures_1 = require("../../structures");
const CacheableStructManager_1 = require("./CacheableStructManager");
class GlobalChannelManager extends CacheableStructManager_1.CacheableStructManager {
    get shouldCacheChannel() {
        var _a, _b;
        return ((_b = (_a = this.client.options) === null || _a === void 0 ? void 0 : _a.cache) === null || _b === void 0 ? void 0 : _b.cacheChannels) !== false;
    }
    create(options) {
        return this.client.rest.router.createChannel(options).then((data) => {
            const newChannel = new ((0, exports.transformTypeToChannel)(data.channel.type))(this.client, data.channel);
            return newChannel;
        });
    }
    fetch(channelId, force) {
        if (!force) {
            const existingChannel = this.client.channels.cache.get(channelId);
            if (existingChannel)
                return Promise.resolve(existingChannel);
        }
        return this.client.rest.router.getChannel(channelId).then((data) => {
            const fetchedChannel = new ((0, exports.transformTypeToChannel)(data.channel.type))(this.client, data.channel);
            if (this.shouldCacheChannel)
                this.cache.set(fetchedChannel.id, fetchedChannel);
            return fetchedChannel;
        });
    }
    update(channelId, options) {
        return this.client.rest.router.updateChannel(channelId, options).then((data) => {
            const existingChannel = this.cache.get(channelId);
            if (existingChannel)
                return existingChannel._update(data.channel);
            const newChannel = new ((0, exports.transformTypeToChannel)(data.channel.type))(this.client, data.channel);
            if (this.shouldCacheChannel)
                this.cache.set(newChannel.id, newChannel);
            return newChannel;
        });
    }
    delete(channelId) {
        return this.client.rest.router.deleteChannel(channelId).then((data) => {
            const cachedChannel = this.cache.get(channelId);
            return cachedChannel !== null && cachedChannel !== void 0 ? cachedChannel : void 0;
        });
    }
}
exports.GlobalChannelManager = GlobalChannelManager;
const transformTypeToChannel = (str) => { var _a; return (_a = exports.typeToChannel[str]) !== null && _a !== void 0 ? _a : structures_1.Channel; };
exports.transformTypeToChannel = transformTypeToChannel;
exports.typeToChannel = {
    forums: structures_1.ForumChannel,
    docs: structures_1.DocChannel,
    list: structures_1.ListChannel,
};
//# sourceMappingURL=ChannelManager.js.map