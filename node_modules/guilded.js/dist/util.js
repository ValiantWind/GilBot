"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveColor = exports.resolveContentToData = exports.buildMemberKey = exports.ASSET_BUILDER = exports.IMG_EXTENSION = void 0;
const constants_1 = require("./constants");
const Embed_1 = require("./structures/Embed");
var IMG_EXTENSION;
(function (IMG_EXTENSION) {
    IMG_EXTENSION["PNG"] = "png";
    IMG_EXTENSION["GIF"] = "gif";
    IMG_EXTENSION["WEBP"] = "webp";
})(IMG_EXTENSION = exports.IMG_EXTENSION || (exports.IMG_EXTENSION = {}));
const formAssetURL = (route, hash, extension, width, height, size) => {
    const url = new URL(`https://${constants_1.ROUTES.IMAGE_CDN_DOMAIN}/${route}/${hash}-${size}.${extension.toLowerCase()}`);
    if (width)
        url.searchParams.append("w", width.toString());
    if (height)
        url.searchParams.append("h", height.toString());
    return url.toString();
};
exports.ASSET_BUILDER = {
    AVATAR_URL: (hash, size = "Medium") => formAssetURL("UserAvatar", hash, IMG_EXTENSION.PNG, undefined, undefined, size),
    IMAGE_IN_CHAT: (hash, size = "Full", width, height) => formAssetURL("ContentMedia", hash, IMG_EXTENSION.WEBP, width, height, size),
    PROFILE_BANNER: (hash, size = "Hero", width, height) => formAssetURL("UserBanner", hash, IMG_EXTENSION.PNG, width, height, size),
    TEAM_BANNER: (hash, size = "Hero", width, height) => formAssetURL("TeamBanner", hash, IMG_EXTENSION.PNG, width, height, size),
    TEAM_EMOJI: (hash, size = "Full", extension = "WEBP", width, height) => formAssetURL("CustomReaction", hash, extension.toLowerCase(), width, height, size),
    TEAM_ICON: (hash, size = "Medium") => formAssetURL("TeamAvatar", hash, IMG_EXTENSION.PNG, undefined, undefined, size),
};
const buildMemberKey = (serverId, memberId) => {
    return `${serverId}:${memberId}`;
};
exports.buildMemberKey = buildMemberKey;
const resolveContentToData = (content) => {
    var _a;
    if (typeof content === "string")
        return { content };
    if (content instanceof Embed_1.Embed)
        return { embeds: [content.toJSON()] };
    return Object.assign(Object.assign({}, content), { embeds: (_a = content.embeds) === null || _a === void 0 ? void 0 : _a.map((x) => (x instanceof Embed_1.Embed ? x.toJSON() : x)) });
};
exports.resolveContentToData = resolveContentToData;
var webhook_client_1 = require("@guildedjs/webhook-client");
Object.defineProperty(exports, "resolveColor", { enumerable: true, get: function () { return webhook_client_1.resolveColor; } });
//# sourceMappingURL=util.js.map