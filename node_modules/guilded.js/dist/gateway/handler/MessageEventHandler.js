"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageEventHandler = void 0;
const constants_1 = require("../../constants");
const Message_1 = require("../../structures/Message");
const GatewayEventHandler_1 = require("./GatewayEventHandler");
class MessageEventHandler extends GatewayEventHandler_1.GatewayEventHandler {
    messageCreated(data) {
        // This is in the case that a REST request beats us to adding the message in the cache.
        const existingMessage = this.client.messages.cache.get(data.d.message.id);
        if (existingMessage)
            return this.client.emit(constants_1.constants.clientEvents.MESSAGE_CREATED, existingMessage);
        const newMessage = new Message_1.Message(this.client, data.d.message);
        this.client.messages.cache.set(newMessage.id, newMessage);
        return this.client.emit(constants_1.constants.clientEvents.MESSAGE_CREATED, newMessage);
    }
    messageUpdated(data) {
        const getCachedMessage = this.client.messages.cache.get(data.d.message.id);
        if (!getCachedMessage) {
            const newMessage = new Message_1.Message(this.client, data.d.message);
            return this.client.emit(constants_1.constants.clientEvents.MESSAGE_UPDATED, newMessage, null);
        }
        const frozenOldMessage = Object.freeze(getCachedMessage._clone());
        getCachedMessage._update(data.d.message);
        return this.client.emit(constants_1.constants.clientEvents.MESSAGE_UPDATED, getCachedMessage, frozenOldMessage);
    }
    messageDeleted(data) {
        const getCachedMessage = this.client.messages.cache.get(data.d.message.id);
        getCachedMessage === null || getCachedMessage === void 0 ? void 0 : getCachedMessage._update({ deletedAt: data.d.message.deletedAt });
        return this.client.emit(constants_1.constants.clientEvents.MESSAGE_DELETED, getCachedMessage || data.d);
    }
}
exports.MessageEventHandler = MessageEventHandler;
//# sourceMappingURL=MessageEventHandler.js.map