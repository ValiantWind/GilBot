"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientGatewayHandler = void 0;
const MessageEventHandler_1 = require("./handler/MessageEventHandler");
const TeamEventHandler_1 = require("./handler/TeamEventHandler");
const TeamMemberEventHandler_1 = require("./handler/TeamMemberEventHandler");
const guilded_api_typings_1 = require("@guildedjs/guilded-api-typings");
const TeamWebhookEventHandler_1 = require("./handler/TeamWebhookEventHandler");
const ListEventHandler_1 = require("./handler/ListEventHandler");
const TeamChannelEventHandler_1 = require("./handler/TeamChannelEventHandler");
const DocEventHandler_1 = require("./handler/DocEventHandler");
class ClientGatewayHandler {
    constructor(client) {
        this.client = client;
        this.messageHandler = new MessageEventHandler_1.MessageEventHandler(this.client);
        this.teamHandler = new TeamEventHandler_1.TeamEventHandler(this.client);
        this.teamMemberHandler = new TeamMemberEventHandler_1.TeamMemberEventHandler(this.client);
        this.teamWebhookHandler = new TeamWebhookEventHandler_1.TeamWebhookEventHandler(this.client);
        this.listHandler = new ListEventHandler_1.ListEventHandler(this.client);
        this.teamChannelHandler = new TeamChannelEventHandler_1.TeamChannelEventHandler(this.client);
        this.docHandler = new DocEventHandler_1.DocEventHandler(this.client);
        this.eventToHandlerMap = {
            [guilded_api_typings_1.WebSocketEvents.ChatMessageCreated]: (data) => this.messageHandler.messageCreated(data),
            [guilded_api_typings_1.WebSocketEvents.ChatMessageDeleted]: (data) => this.messageHandler.messageDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.ChatMessageUpdated]: (data) => this.messageHandler.messageUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberJoined]: (data) => this.teamMemberHandler.teamMemberJoined(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberRemoved]: (data) => this.teamMemberHandler.teamMemberRemoved(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberUpdated]: (data) => this.teamMemberHandler.teamMemberUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.teamRolesUpdated]: (data) => this.teamHandler.teamRolesUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberBanned]: (data) => this.teamMemberHandler.teamMemberBanned(data),
            [guilded_api_typings_1.WebSocketEvents.TeamMemberUnbanned]: (data) => this.teamMemberHandler.teamMemberUnbanned(data),
            [guilded_api_typings_1.WebSocketEvents.TeamWebhookCreated]: (data) => this.teamWebhookHandler.teamWebhookCreated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamWebhookUpdated]: (data) => this.teamWebhookHandler.teamWebhookUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemCompleted]: (data) => this.listHandler.ListItemCompleted(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemUncompleted]: (data) => this.listHandler.ListItemUncompleted(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemCreated]: (data) => this.listHandler.ListItemCreated(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemUpdated]: (data) => this.listHandler.ListItemUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.ListItemDeleted]: (data) => this.listHandler.ListItemDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.DocCreated]: (data) => this.docHandler.DocCreated(data),
            [guilded_api_typings_1.WebSocketEvents.DocDeleted]: (data) => this.docHandler.DocDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.DocUpdated]: (data) => this.docHandler.DocUpdated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamChannelCreated]: (data) => this.teamChannelHandler.TeamChannelCreated(data),
            [guilded_api_typings_1.WebSocketEvents.TeamChannelDeleted]: (data) => this.teamChannelHandler.TeamChannelDeleted(data),
            [guilded_api_typings_1.WebSocketEvents.TeamChannelUpdated]: (data) => this.teamChannelHandler.TeamChannelUpdated(data),
        };
    }
    handleWSMessage(event, data) {
        var _a, _b, _c;
        (_c = (_b = (_a = this.eventToHandlerMap)[event]) === null || _b === void 0 ? void 0 : _b.call(_a, data)) !== null && _c !== void 0 ? _c : this.client.emit("unknownGatewayEvent", data);
    }
}
exports.ClientGatewayHandler = ClientGatewayHandler;
//# sourceMappingURL=ClientGatewayHandler.js.map