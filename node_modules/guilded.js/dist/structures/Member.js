"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberBan = exports.PartialMember = exports.Member = void 0;
const Base_1 = require("./Base");
const util_1 = require("../util");
class Member extends Base_1.Base {
    constructor(client, data) {
        super(client, data);
        /** The nickname for this member */
        this.nickname = null;
        /** Roles this member has by ID (TODO: role object when Guilded API has one) */
        this.roleIds = [];
        this.serverId = data.serverId;
        this.joinedAt = new Date(data.joinedAt);
        this.kicked = false;
        this.banned = false;
        this.isOwner = false;
        this._update(data);
    }
    _update(data) {
        var _a;
        if ("nickname" in data) {
            this.nickname = (_a = data.nickname) !== null && _a !== void 0 ? _a : null;
        }
        if ("roleIds" in data && typeof data.roleIds !== "undefined") {
            this.roleIds = data.roleIds;
        }
        if ("kicked" in data && typeof data.kicked !== "undefined") {
            this.kicked = data.kicked;
        }
        if ("banned" in data && typeof data.banned !== "undefined") {
            this.banned = data.banned;
        }
        if ("isOwner" in data && typeof data.isOwner !== "undefined") {
            this.isOwner = data.isOwner;
        }
        return this;
    }
    /** Get the user associated with this member */
    get user() {
        var _a;
        return (_a = this.client.users.cache.get(this.id)) !== null && _a !== void 0 ? _a : null;
    }
    /** The username of this member */
    get username() {
        var _a, _b;
        return (_b = (_a = this.user) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : null;
    }
    /** Either the nickname or the username associated with this member. */
    get displayName() {
        var _a;
        return (_a = this.nickname) !== null && _a !== void 0 ? _a : this.username;
    }
    /** Get a list of the roles assigned to this member. */
    getRoles() {
        return this.client.members.getRoles(this.serverId, this.id);
    }
    /** Update this member's nickname. */
    updateNickname(nickname) {
        return this.client.members.updateNickname(this.serverId, this.id, nickname);
    }
    /** Reset this member's nickname */
    resetNickname() {
        return this.client.members.resetNickname(this.serverId, this.id);
    }
    /** Award XP to this member */
    awardXP(amount) {
        return this.client.members.giveXP(this.serverId, this.id, amount);
    }
    /** Add role to this member */
    addRole(roleId) {
        return this.client.roles.addRoleToMember(this.serverId, this.id, roleId);
    }
    /** Remove role from this member */
    removeRole(roleId) {
        return this.client.roles.removeRoleFromMember(this.serverId, this.id, roleId);
    }
    /** Kick this user */
    kick() {
        return this.client.members.kick(this.serverId, this.id);
    }
}
exports.Member = Member;
/** A partial summary representation of a member. Can fetch this member to get full data */
class PartialMember extends Base_1.Base {
    constructor(client, data) {
        super(client, data);
        /** Roles this member has by ID (TODO: role object when Guilded API has one) */
        this.roleIds = [];
        this.serverId = data.serverId;
        this.user = data.user;
        this.roleIds = data.roleIds;
    }
    /** Fetch the full member object of this partial member */
    fetch() {
        return this.client.members.fetch(this.serverId, this.user.id);
    }
}
exports.PartialMember = PartialMember;
class MemberBan extends Base_1.Base {
    constructor(client, data) {
        var _a;
        const transformedBanId = (0, util_1.buildMemberKey)(data.serverId, data.user.id);
        super(client, Object.assign(Object.assign({}, data), { id: transformedBanId }));
        this.serverId = data.serverId;
        this.createdAt = new Date(data.createdAt);
        this.createdById = data.createdBy;
        this.target = data.user;
        this.reason = (_a = data.reason) !== null && _a !== void 0 ? _a : null;
    }
    /** The author of the ban */
    get author() {
        return this.client.users.cache.get(this.createdById);
    }
    /** Remove this ban */
    unban() {
        return this.client.bans.unban(this.serverId, this.target.id);
    }
}
exports.MemberBan = MemberBan;
//# sourceMappingURL=Member.js.map