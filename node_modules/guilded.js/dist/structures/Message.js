"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = exports.MessageType = void 0;
const Base_1 = require("./Base");
const util_1 = require("../util");
const Embed_1 = require("./Embed");
var MessageType;
(function (MessageType) {
    MessageType[MessageType["Default"] = 0] = "Default";
    MessageType[MessageType["System"] = 1] = "System";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
class Message extends Base_1.Base {
    constructor(client, data) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(client, data);
        /** The ID of the messages that this is replying to. */
        this.replyMessageIds = [];
        /** Whether the message has been deleted */
        this.deleted = false;
        /** When the message was deleted, if it was */
        this.deletedAt = null;
        this.id = data.id;
        this.channelId = data.channelId;
        this.content = (_a = data.content) !== null && _a !== void 0 ? _a : "";
        this.serverId = (_b = data.serverId) !== null && _b !== void 0 ? _b : null;
        this.replyMessageIds = (_c = data.replyMessageIds) !== null && _c !== void 0 ? _c : [];
        this.createdById = data.createdBy;
        this.createdByBotId = (_d = data.createdByBotId) !== null && _d !== void 0 ? _d : null;
        this.createdByWebhookId = (_e = data.createdByWebhookId) !== null && _e !== void 0 ? _e : null;
        this.createdAt = new Date(data.createdAt);
        this.updatedAt = null;
        this.isPrivate = (_f = data.isPrivate) !== null && _f !== void 0 ? _f : false;
        this.isSilent = (_g = data.isSilent) !== null && _g !== void 0 ? _g : false;
        this.type = data.type === "system" ? MessageType.System : MessageType.Default;
        this._update(data);
    }
    /** Update details of this structure */
    _update(data) {
        if ("content" in data && typeof data.content !== "undefined") {
            this.content = data.content;
        }
        if ("updatedAt" in data) {
            this.updatedAt = data.updatedAt ? new Date(data.updatedAt) : null;
        }
        if ("deletedAt" in data) {
            this.deleted = true;
            this.deletedAt = new Date(data.deletedAt);
        }
        return this;
    }
    /** Get the author of this message */
    get author() {
        var _a;
        return (_a = this.client.users.cache.get(this.createdById)) !== null && _a !== void 0 ? _a : null;
    }
    /** The author id of the user who sent this message. */
    get authorId() {
        var _a, _b;
        return (_b = (_a = this.createdByBotId) !== null && _a !== void 0 ? _a : this.createdByWebhookId) !== null && _b !== void 0 ? _b : this.createdById;
    }
    /** Get the member of this message (if in server) */
    get member() {
        var _a;
        return this.serverId ? (_a = this.client.members.cache.get((0, util_1.buildMemberKey)(this.serverId, this.authorId))) !== null && _a !== void 0 ? _a : null : null;
    }
    /** Get the channel of this message */
    get channel() {
        var _a;
        return (_a = this.client.channels.cache.get(this.channelId)) !== null && _a !== void 0 ? _a : null;
    }
    /* Edit message content */
    edit(newContent) {
        return this.client.messages.update(this.channelId, this.id, newContent).then(() => this);
    }
    /** Send a message in the same channel as this message. */
    send(content) {
        return this.client.messages.send(this.channelId, content);
    }
    /** Send a message that replies to this message. It mentions the user who sent this message. */
    reply(content) {
        return this.client.messages.send(this.channelId, typeof content === "string"
            ? { content, replyMessageIds: [this.id] }
            : content instanceof Embed_1.Embed
                ? { embeds: [content] }
                : Object.assign(Object.assign({}, content), { replyMessageIds: content.replyMessageIds ? [this.id, ...content.replyMessageIds] : [this.id] }));
    }
    /** Delete this message. */
    delete() {
        return this.client.messages.delete(this.channelId, this.id);
    }
}
exports.Message = Message;
//# sourceMappingURL=Message.js.map