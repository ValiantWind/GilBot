import type { Client } from "../structures/Client";
import { MessageEventHandler } from "./handler/MessageEventHandler";
import { TeamEventHandler } from "./handler/TeamEventHandler";
import { TeamMemberEventHandler } from "./handler/TeamMemberEventHandler";
import type { SkeletonWSPayload, WSEvent } from "@guildedjs/guilded-api-typings";
import { TeamWebhookEventHandler } from "./handler/TeamWebhookEventHandler";
import { ListEventHandler } from "./handler/ListEventHandler";
import { TeamChannelEventHandler } from "./handler/TeamChannelEventHandler";
import { DocEventHandler } from "./handler/DocEventHandler";
export declare class ClientGatewayHandler {
    readonly client: Client;
    messageHandler: MessageEventHandler;
    teamHandler: TeamEventHandler;
    teamMemberHandler: TeamMemberEventHandler;
    teamWebhookHandler: TeamWebhookEventHandler;
    listHandler: ListEventHandler;
    teamChannelHandler: TeamChannelEventHandler;
    docHandler: DocEventHandler;
    readonly eventToHandlerMap: Record<keyof WSEvent, (data: SkeletonWSPayload) => boolean>;
    constructor(client: Client);
    handleWSMessage(event: keyof WSEvent, data: SkeletonWSPayload): void;
}
//# sourceMappingURL=ClientGatewayHandler.d.ts.map