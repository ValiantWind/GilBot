import Collection from "@discordjs/collection";
export interface CacheStructure<K, V> {
    get: (key: K) => V | Promise<V>;
    set: (key: K, value: V) => void | Promise<void>;
    delete: (key: K) => void | Promise<void>;
}
/**
 * A collection with a max cap size, which will remove a random element
 */
export declare class CacheCollection<K, V> extends Collection<K, V> {
    maxSize: number;
    constructor(options?: {
        maxSize?: number;
    }, entries?: readonly (readonly [K, V])[] | null | undefined);
    set(...args: Parameters<typeof Collection.prototype["set"]>): this;
}
export declare function inMemoryCacheBuilder<K, T>(_structName: string, _struct: T): CacheCollection<K, T>;
//# sourceMappingURL=cache.d.ts.map