import { RestManager } from "@guildedjs/rest";
import { WebSocketManager } from "@guildedjs/ws";
import { ClientGatewayHandler } from "../gateway/ClientGatewayHandler";
import { GlobalChannelManager } from "../managers/global/ChannelManager";
import { GlobalDocManager } from "../managers/global/DocManager";
import { GlobalForumManager } from "../managers/global/ForumManager";
import { GlobalGroupManager } from "../managers/global/GroupManager";
import { GlobalListItemManager } from "../managers/global/ListManager";
import { GlobalMemberManager } from "../managers/global/MemberManager";
import { GlobalMessageManager } from "../managers/global/MessageManager";
import { GlobalRoleManager } from "../managers/global/RoleManager";
import { GlobalUserManager } from "../managers/global/UserManager";
import { GlobalGuildBanManager } from "../managers/global/GuildBanManager";
import type { Message } from "./Message";
import type TypedEmitter from "typed-emitter";
import type { WSChatMessageDeletedPayload, WSTeamMemberBannedPayload, WSTeamMemberRemovedPayload, WSTeamMemberUnbannedPayload, WSTeamMemberUpdatedPayload, TeamMemberRoleIdsPayload, DocPayload, ListItemPayload, ListItemSummaryPayload } from "@guildedjs/guilded-api-typings";
import type { Member, MemberBan } from "./Member";
import type { CacheStructure } from "../cache";
import { GlobalWebhookManager } from "../managers/global/WebhookManager";
import type { Webhook } from "./Webhook";
import { ClientUser } from "./User";
import type { Channel } from "./channels";
declare const Client_base: new () => TypedEmitter<ClientEvents>;
export declare class Client extends Client_base {
    options: ClientOptions;
    /** The time in milliseconds since the Client connected */
    readyTimestamp: number | null;
    /** The manager for the bot to make requests to the REST api. */
    rest: RestManager;
    /** The websocket connection */
    ws: WebSocketManager;
    /** The gateway event handlers will be processed by this manager. */
    gatewayHandler: ClientGatewayHandler;
    /** Managers for structures */
    channels: GlobalChannelManager;
    docs: GlobalDocManager;
    forums: GlobalForumManager;
    groups: GlobalGroupManager;
    lists: GlobalListItemManager;
    members: GlobalMemberManager;
    messages: GlobalMessageManager;
    roles: GlobalRoleManager;
    users: GlobalUserManager;
    bans: GlobalGuildBanManager;
    webhooks: GlobalWebhookManager;
    /** The user belonging to this bot */
    user: ClientUser | null;
    constructor(options: ClientOptions);
    /** The amount of time the bot has been online in milliseconds. */
    get uptime(): number;
    /** The bot's token. */
    get token(): string;
    /** Connects the bot to the api. */
    login(opts?: {
        fresh?: boolean;
    }): void;
    /** Disconnects the bot. */
    disconnect(): void;
}
interface ClientOptions {
    /** The bot's token */
    token: string;
    /** The RestManager options */
    rest?: {
        /** The version of the API to be used for making requests. By default, this will use the latest version that the library supports. */
        version?: 1;
        /** The base url of the API you want to send requests to. By default, this will send it to guilded's rest API. This is meant for big bot developers who want to use a proxy rest system. */
        proxyURL?: string;
    };
    cache?: {
        structureBuilder?: <K, V>() => CacheStructure<K, V>;
        removeMemberOnLeave?: boolean;
        removeMemberBanOnUnban?: boolean;
        removeChannelOnDelete?: boolean;
        cacheMemberBans?: boolean;
        cacheWebhooks?: boolean;
        cacheChannels?: boolean;
    };
}
declare type ClientEvents = {
    ready: () => unknown;
    debug: (data: any) => unknown;
    exit: () => unknown;
    error: (reason: string, err: Error | null) => unknown;
    messageCreated: (message: Message) => unknown;
    messageUpdated: (message: Message, oldMessage: Message | null) => unknown;
    messageDeleted: (message: Message | WSChatMessageDeletedPayload["d"]) => unknown;
    channelCreated: (channel: Channel) => unknown;
    channelUpdated: (channel: Channel, oldChannel: Channel | null) => unknown;
    channelDeleted: (channel: Channel) => unknown;
    docCreated: (doc: DocPayload) => unknown;
    docUpdated: (newDoc: DocPayload, oldDoc: DocPayload | null) => unknown;
    docDeleted: (doc: DocPayload) => unknown;
    listItemCreated: (item: ListItemPayload) => unknown;
    listItemUpdated: (newItem: ListItemPayload, oldItem: ListItemPayload | ListItemSummaryPayload | null) => unknown;
    listItemDeleted: (item: ListItemPayload) => unknown;
    listItemCompleted: (item: ListItemPayload) => unknown;
    listItemUncompleted: (item: ListItemPayload) => unknown;
    memberJoined: (member: Member) => unknown;
    memberRemoved: (member: Member | WSTeamMemberRemovedPayload["d"]) => unknown;
    memberUpdated: (member: Member | WSTeamMemberUpdatedPayload["d"], oldMember: Member | null) => unknown;
    memberBanned: (member: MemberBan | WSTeamMemberBannedPayload["d"]) => unknown;
    memberUnbanned: (member: MemberBan | WSTeamMemberUnbannedPayload["d"]) => unknown;
    serverCreated: (server: {
        serverId: string;
    }) => unknown;
    webhookCreated: (webhook: Webhook) => unknown;
    webhookUpdated: (webhook: Webhook, oldWebhook: Webhook | null) => unknown;
    rolesUpdated: (members: (Member | (TeamMemberRoleIdsPayload & {
        serverId: string;
    }))[], oldMembers: Member[]) => unknown;
    unknownGatewayEvent: (data: any) => unknown;
};
export {};
//# sourceMappingURL=Client.d.ts.map