import type Collection from "@discordjs/collection";
import type { RESTGetChannelMessagesQuery, RESTPostChannelMessagesBody, RESTPatchChannelBody, ServerChannelPayload } from "@guildedjs/guilded-api-typings";
import { Base } from "../Base";
import type { Client } from "../Client";
import type { Message } from "../Message";
export declare class Channel extends Base {
    type: ChannelType;
    name: string;
    topic: string | null;
    createdAt: Date;
    createdBy: string;
    updatedAt: Date | null;
    serverId: string;
    parentId: string | null;
    categoryId: string | null;
    groupId: string;
    isPublic: boolean;
    archivedBy: string | null;
    archivedAt: Date | null;
    constructor(client: Client, data: ServerChannelPayload & {
        deleted?: boolean;
    });
    _update(data: Partial<ServerChannelPayload & {
        deleted?: boolean;
    }>): this;
    /** Get a list of the latest 100 messages from a channel. */
    fetchMessages(options?: RESTGetChannelMessagesQuery): Promise<Collection<string, Message>>;
    /** Get details for a specific chat message from a chat channel. */
    fetchMessage(messageId: string): Promise<Message>;
    /** Update this channel. */
    update(options: RESTPatchChannelBody): Promise<Channel>;
    /** Delete this channel. */
    delete(): Promise<void | Channel>;
    /** Send a chat message in the channel. */
    send(content: RESTPostChannelMessagesBody | string): Promise<Message>;
}
declare enum ChannelType {
    Announcements = 0,
    Chat = 1,
    Calendar = 2,
    Forums = 3,
    Media = 4,
    Docs = 5,
    Voice = 6,
    List = 7,
    Scheduling = 8,
    Stream = 9
}
export {};
//# sourceMappingURL=Channel.d.ts.map