import type { Client } from "./Client";
import { Base } from "./Base";
import type { UpgradedTeamMemberBanPayload, UpgradedTeamMemberPayload, UpgradedTeamMemberSummaryPayload } from "../typings";
import type { TeamMemberPayload, UserSummaryPayload } from "@guildedjs/guilded-api-typings";
import type { User } from "./User";
export declare class Member extends Base<UpgradedTeamMemberPayload> {
    /** The ID of the server this role belongs to */
    readonly serverId: string;
    /** The nickname for this member */
    nickname: string | null;
    /** Date this member joined */
    joinedAt: Date | null;
    /** Roles this member has by ID (TODO: role object when Guilded API has one) */
    roleIds: number[];
    /** Whether this member has been kicked */
    kicked: boolean;
    /** Whether this member has been banned */
    banned: boolean;
    /** Whether this member owns the server */
    isOwner: boolean;
    constructor(client: Client, data: UpgradedTeamMemberPayload);
    _update(data: Partial<TeamMemberPayload & {
        kicked: boolean;
        banned: boolean;
    }>): this;
    /** Get the user associated with this member */
    get user(): User | null;
    /** The username of this member */
    get username(): string | null;
    /** Either the nickname or the username associated with this member. */
    get displayName(): string | null;
    /** Get a list of the roles assigned to this member. */
    getRoles(): Promise<number[]>;
    /** Update this member's nickname. */
    updateNickname(nickname: string): Promise<string>;
    /** Reset this member's nickname */
    resetNickname(): Promise<void>;
    /** Award XP to this member */
    awardXP(amount: number): Promise<number>;
    /** Add role to this member */
    addRole(roleId: number): Promise<void>;
    /** Remove role from this member */
    removeRole(roleId: number): Promise<void>;
    /** Kick this user */
    kick(): Promise<Member | null>;
}
/** A partial summary representation of a member. Can fetch this member to get full data */
export declare class PartialMember extends Base<UpgradedTeamMemberSummaryPayload> {
    /** The ID of the server this role belongs to */
    readonly serverId: string;
    /** The user information of this member */
    readonly user: UserSummaryPayload;
    /** Roles this member has by ID (TODO: role object when Guilded API has one) */
    readonly roleIds: number[];
    constructor(client: Client, data: UpgradedTeamMemberSummaryPayload);
    /** Fetch the full member object of this partial member */
    fetch(): Promise<Member>;
}
export declare class MemberBan extends Base<UpgradedTeamMemberBanPayload> {
    /** Id this ban was created in */
    serverId: string;
    /** Date this ban was created */
    createdAt: Date;
    /** The ID of user who banned this person */
    createdById: string;
    /** The reason this user was banned */
    reason: string | null;
    /** Information about the target user */
    target: UserSummaryPayload;
    constructor(client: Client, data: UpgradedTeamMemberBanPayload);
    /** The author of the ban */
    get author(): User | undefined;
    /** Remove this ban */
    unban(): Promise<MemberBan | null>;
}
//# sourceMappingURL=Member.d.ts.map