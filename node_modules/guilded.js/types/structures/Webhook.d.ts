import type { RESTPutServerWebhookBody } from "@guildedjs/guilded-api-typings";
import type { WebhookPayload } from "@guildedjs/guilded-api-typings/dist/v1/structs/Webhook";
import { Base } from "./Base";
import type { Client } from "./Client";
import type { User } from "./User";
/**
 * Object representing received webhook data. This object is NOT to be used to send data to webhooks. That will be WebhookClient
 */
export declare class Webhook extends Base<WebhookPayload> {
    /**
     * The username belonging to this webhook
     */
    name: string;
    /**
     * The ID of the channel this webhook belongs to
     */
    channelID: string;
    /**
     * The ID of the server this webhook belongs to
     */
    readonly serverId: string;
    /**
     * The date in which this webhook was created
     */
    createdAt: Date;
    /**
     * The date this webhook was deleted if it was deleted
     */
    deletedAt: Date | null;
    /**
     * The user who created this webhook
     */
    readonly authorID: string;
    /**
     * The token of this webhook
     */
    token: string | null;
    constructor(client: Client, data: WebhookPayload);
    /** The author of this webhook */
    get user(): User | null;
    _update(data: Partial<WebhookPayload>): this;
    update(options: RESTPutServerWebhookBody): Promise<Webhook>;
    delete(): Promise<this>;
}
//# sourceMappingURL=Webhook.d.ts.map