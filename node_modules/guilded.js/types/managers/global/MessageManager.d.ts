import type { RESTPostChannelMessagesBody, RESTGetChannelMessagesQuery } from "@guildedjs/guilded-api-typings";
import { Message } from "../../structures/Message";
import { CacheableStructManager } from "./CacheableStructManager";
import Collection from "@discordjs/collection";
import type { Embed } from "../../structures/Embed";
import type { MessageContent } from "../../typings";
export declare class GlobalMessageManager extends CacheableStructManager<string, Message> {
    /** Get a list of the latest 50 messages from a channel. */
    fetchMany(channelId: string, options: RESTGetChannelMessagesQuery): Promise<Collection<string, Message>>;
    /** Get details for a specific chat message from a chat channel. */
    fetch(channelId: string, messageId: string, force?: boolean): Promise<Message>;
    /** Send a message in a channel */
    send(channelId: string, content: MessageContent): Promise<Message>;
    /** Add a reaction emote */
    addReaction(channelId: string, contentId: string, emoteId: number): Promise<void>;
    /** Update a channel message. */
    update(channelId: string, messageId: string, content: RESTPostChannelMessagesBody | Embed | string): Promise<Message>;
    /** Delete a channel message. */
    delete(channelId: string, messageId: string): Promise<void>;
}
//# sourceMappingURL=MessageManager.d.ts.map