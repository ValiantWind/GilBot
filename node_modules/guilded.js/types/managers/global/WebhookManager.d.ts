import Collection from "@discordjs/collection";
import type { RESTPostServerWebhooksBody, RESTPutServerWebhookBody } from "@guildedjs/guilded-api-typings";
import { Webhook } from "../../structures/Webhook";
import { CacheableStructManager } from "./CacheableStructManager";
export declare class GlobalWebhookManager extends CacheableStructManager<string, Webhook> {
    get _shouldCacheWebhook(): boolean;
    /** Create a webhook */
    createWebhook(serverId: string, options: RESTPostServerWebhooksBody): Promise<Webhook>;
    /** Get a server's webhooks */
    getWebhooks(serverId: string, channelId?: string): Promise<Collection<string, Webhook>>;
    /** Get a webhook */
    getWebhook(serverId: string, webhookId: string, force?: boolean): Promise<Webhook>;
    /** Update a webhook */
    updateWebhook(serverId: string, webhookId: string, options: RESTPutServerWebhookBody): Promise<Webhook>;
    /** Delete a webhook */
    deleteWebhook(serverId: string, webhookId: string): Promise<Webhook | null>;
}
//# sourceMappingURL=WebhookManager.d.ts.map