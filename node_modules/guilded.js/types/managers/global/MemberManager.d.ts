import { Member, PartialMember } from "../../structures/Member";
import { CacheableStructManager } from "./CacheableStructManager";
import Collection from "@discordjs/collection";
import type { SocialLink, UserSocialLink } from "@guildedjs/guilded-api-typings";
export declare class GlobalMemberManager extends CacheableStructManager<string, Member> {
    /** Fetch a member from a server */
    fetch(serverId: string, memberId: string, force?: boolean): Promise<Member>;
    /** Fetch all members from a server. Returned objects are partial members */
    fetchMany(serverId: string): Promise<Collection<string, PartialMember>>;
    /** Kick a member from a server */
    kick(serverId: string, memberId: string): Promise<Member | null>;
    /** Get a list of the roles assigned to a member using the id of the member. */
    getRoles(serverId: string, memberId: string): Promise<number[]>;
    /** Update a member's nickname. Returns the new name */
    updateNickname(serverId: string, memberId: string, newNickname: string): Promise<string>;
    /** Delete a member's nickname */
    resetNickname(serverId: string, memberId: string): Promise<void>;
    /** Award XP to a member */
    giveXP(serverId: string, memberId: string, amount: number): Promise<number>;
    /** Retrieves a member's public social links */
    fetchSocialLinks(serverId: string, memberId: string, type: UserSocialLink): Promise<SocialLink>;
}
//# sourceMappingURL=MemberManager.d.ts.map